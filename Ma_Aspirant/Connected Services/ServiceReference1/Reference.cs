//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ma_Aspirant.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService/GetDataUsingDataContractResponse")]
        Ma_Aspirant.ServiceReference1.CompositeType GetDataUsingDataContract(Ma_Aspirant.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<Ma_Aspirant.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(Ma_Aspirant.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EnrolDocumentUpload", ReplyAction="http://tempuri.org/IService/EnrolDocumentUploadResponse")]
        string EnrolDocumentUpload(string flag, string p_data, byte[] upload_file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EnrolDocumentUpload", ReplyAction="http://tempuri.org/IService/EnrolDocumentUploadResponse")]
        System.Threading.Tasks.Task<string> EnrolDocumentUploadAsync(string flag, string p_data, byte[] upload_file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/get_data", ReplyAction="http://tempuri.org/IService/get_dataResponse")]
        System.Data.DataTable get_data(int flag, string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/get_data", ReplyAction="http://tempuri.org/IService/get_dataResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> get_dataAsync(int flag, string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getdata_login", ReplyAction="http://tempuri.org/IService/getdata_loginResponse")]
        string getdata_login(string flag, string empcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getdata_login", ReplyAction="http://tempuri.org/IService/getdata_loginResponse")]
        System.Threading.Tasks.Task<string> getdata_loginAsync(string flag, string empcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/nominee_data", ReplyAction="http://tempuri.org/IService/nominee_dataResponse")]
        System.Data.DataTable nominee_data(string flag, string empcode, string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/nominee_data", ReplyAction="http://tempuri.org/IService/nominee_dataResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> nominee_dataAsync(string flag, string empcode, string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/select_tds_data", ReplyAction="http://tempuri.org/IService/select_tds_dataResponse")]
        System.Data.DataTable select_tds_data(string flag, string empcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/select_tds_data", ReplyAction="http://tempuri.org/IService/select_tds_dataResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> select_tds_dataAsync(string flag, string empcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/proc_hrm_common_select", ReplyAction="http://tempuri.org/IService/proc_hrm_common_selectResponse")]
        System.Data.DataTable proc_hrm_common_select(string pno, string flag, string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/proc_hrm_common_select", ReplyAction="http://tempuri.org/IService/proc_hrm_common_selectResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> proc_hrm_common_selectAsync(string pno, string flag, string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/BAEnrollment", ReplyAction="http://tempuri.org/IService/BAEnrollmentResponse")]
        string BAEnrollment(string flag, string input, byte[] pancard, byte[] idcard, byte[] passbook, byte[] cusphoto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/BAEnrollment", ReplyAction="http://tempuri.org/IService/BAEnrollmentResponse")]
        System.Threading.Tasks.Task<string> BAEnrollmentAsync(string flag, string input, byte[] pancard, byte[] idcard, byte[] passbook, byte[] cusphoto);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Ma_Aspirant.ServiceReference1.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<Ma_Aspirant.ServiceReference1.IService>, Ma_Aspirant.ServiceReference1.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Ma_Aspirant.ServiceReference1.CompositeType GetDataUsingDataContract(Ma_Aspirant.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<Ma_Aspirant.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(Ma_Aspirant.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public string EnrolDocumentUpload(string flag, string p_data, byte[] upload_file) {
            return base.Channel.EnrolDocumentUpload(flag, p_data, upload_file);
        }
        
        public System.Threading.Tasks.Task<string> EnrolDocumentUploadAsync(string flag, string p_data, byte[] upload_file) {
            return base.Channel.EnrolDocumentUploadAsync(flag, p_data, upload_file);
        }
        
        public System.Data.DataTable get_data(int flag, string data) {
            return base.Channel.get_data(flag, data);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> get_dataAsync(int flag, string data) {
            return base.Channel.get_dataAsync(flag, data);
        }
        
        public string getdata_login(string flag, string empcode) {
            return base.Channel.getdata_login(flag, empcode);
        }
        
        public System.Threading.Tasks.Task<string> getdata_loginAsync(string flag, string empcode) {
            return base.Channel.getdata_loginAsync(flag, empcode);
        }
        
        public System.Data.DataTable nominee_data(string flag, string empcode, string data) {
            return base.Channel.nominee_data(flag, empcode, data);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> nominee_dataAsync(string flag, string empcode, string data) {
            return base.Channel.nominee_dataAsync(flag, empcode, data);
        }
        
        public System.Data.DataTable select_tds_data(string flag, string empcode) {
            return base.Channel.select_tds_data(flag, empcode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> select_tds_dataAsync(string flag, string empcode) {
            return base.Channel.select_tds_dataAsync(flag, empcode);
        }
        
        public System.Data.DataTable proc_hrm_common_select(string pno, string flag, string data) {
            return base.Channel.proc_hrm_common_select(pno, flag, data);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> proc_hrm_common_selectAsync(string pno, string flag, string data) {
            return base.Channel.proc_hrm_common_selectAsync(pno, flag, data);
        }
        
        public string BAEnrollment(string flag, string input, byte[] pancard, byte[] idcard, byte[] passbook, byte[] cusphoto) {
            return base.Channel.BAEnrollment(flag, input, pancard, idcard, passbook, cusphoto);
        }
        
        public System.Threading.Tasks.Task<string> BAEnrollmentAsync(string flag, string input, byte[] pancard, byte[] idcard, byte[] passbook, byte[] cusphoto) {
            return base.Channel.BAEnrollmentAsync(flag, input, pancard, idcard, passbook, cusphoto);
        }
    }
}
